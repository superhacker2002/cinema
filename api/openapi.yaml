openapi: 3.0.0
info:
  title: Online Cinema Service
  description: An online cinema service that allows admins to add halls, movies, and cinema sessions, and allows users to view the schedule, see movies watched, and buy tickets. The service returns tickets as PDF documents and exposes a RESTful API.
  version: 1.0.0

servers:
  - url: http://localhost:8080

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadRequest:
      description: Incorrect request was sent to the server.
    Unauthorized:
      description: Unauthorized request, user not authenticated.
    Forbidden:
      description: The user does not have permission to access the requested resource.
    NotFound:
      description: The requested resource was not found on the server.
    InternalServerError:
      description: An unexpected error occurred on the server.

  schemas:
    Hall:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Unique identifier of the hall. Generated on the server side.
          readOnly: true
        name:
          type: string
          example: vip
          description: Hall name
        capacity:
          type: integer
          example: 250
          description: Maximum number of people that the hall can accommodate
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Unique identifier of the user. Generated on the server side.
          readOnly: true
        username:
          type: string
          example: theUser
          description: User name
        email:
          type: string
          example: user@email.com
          description: User email address
        password:
          type: string
          example: user_password
          description: User password
          writeOnly: true

    Movie:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Unique identifier of the movie. Generated on the server side.
          readOnly: true
        title:
          type: string
          example: Titanic
          description: Title of the movie.
        description:
          type: string
          example: Titanic is a 1997 American epic romance and disaster film directed, written, co-produced, and co-edited by James Cameron.
          description: Description of the movie.
        duration:
          type: integer
          example: 195
          description: Duration of the movie in minutes.

    CinemaSession:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Unique identifier of the cinema session. Generated on the server side.
          readOnly: true
        movie_id:
          type: integer
          example: 1
          description: ID of the movie being shown in the cinema session.
        hall_id:
          type: integer
          example: 1
          description: ID of the hall where the session will take place.
        start_time:
          type: string
          format: timestamp
          description: Start time of the cinema session
          example: 2024-05-18 20:00:00
        end_time:
          type: string
          format: timestamp
          description: Start time of the cinema session.
          example: 2024-05-18 22:00:00
          readOnly: true
        price:
          type: number
          format: float
          example: 10.5
          description: Price for the cinema session in GEL
        status:
          type: string
          description: Current status of the movie
          example: scheduled
          readOnly: true

    CinemaSessionResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Unique identifier of the cinema session. Generated on the server side.
          readOnly: true
        movie_id:
          type: integer
          example: 1
          description: ID of the movie being shown in the cinema session.
        hall_id:
          type: integer
          example: 1
          description: ID of the hall where the session will take place.
        start_time:
          type: string
          format: timestamp
          description: Start time of the cinema session
          example: 2024-05-18 20:00:00
        price:
          type: number
          format: float
          example: 10.5
          description: Price for the cinema session in GEL
        status:
          type: string
          description: Current status of the movie
          example: scheduled
          readOnly: true

    Ticket:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Unique identifier of the ticket. Generated on the server side.
          readOnly: true
        user_id:
          type: integer
          example: 1
          description: ID of the user who purchased the ticket.
        cinema_session_id:
          type: integer
          example: 1
          description: ID of the cinema session for which the ticket was purchased.
        seat_number:
          type: integer
          example: 50
          description: Number of the seat in the hall for which the ticket was purchased.
        price:
          type: number
          format: float
          example: 350
          description: Price of the ticket in dollars.
        pdf_url:
          type: string
          example: https://storage/ticket/1234
          description: URL of the PDF document containing the ticket.
          readOnly: true

paths:
  /halls:
    get:
      tags:
        - halls
      summary: Get all halls
      description: Retrieves a list of all halls in the cinema.
      operationId: getAllHalls
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hall'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

    post:
      tags:
        - halls
      summary: Create a new hall
      operationId: createHall
      requestBody:
        description: Details about the new hall
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hall'
      responses:
        '201':
          description: The new hall was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hall'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /halls/{hallId}:
    get:
      tags:
        - halls
      summary: Get hall by ID
      description: Retrieves a single hall by its unique ID
      operationId: getHallById
      parameters:
        - name: hallId
          in: path
          description: ID of hall to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hall'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

    put:
      tags:
        - halls
      summary: Update details about a specific hall
      operationId: updateHall
      parameters:
        - name: hallId
          in: path
          description: The ID of the hall to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hall'
      responses:
        '200':
          description: Successful hall update
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

    delete:
      tags:
        - halls
      summary: Delete specific hall by it's ID
      operationId: deleteHall
      parameters:
        - name: hallId
          in: path
          description: The ID of the hall to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successful hall delete
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []

  /movies:
    get:
      tags:
        - movies
      summary: Returns a list of all movies
      operationId: getAllMovies
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

    post:
      tags:
        - movies
      summary: Creates a new movie
      operationId: createMovie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        '201':
          description: The movie was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /movies/watched/{userId}:
    get:
      tags:
        - movies
      summary: Returns list of watched movies by specific user
      operationId: getMoviesWatched
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: ID of the movie to retrieve
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /movies/{movieId}:
    get:
      tags:
        - movies
      summary: Returns a specific movie by ID
      operationId: getMovieById
      parameters:
        - in: path
          name: movieId
          required: true
          schema:
            type: integer
          description: ID of the movie to retrieve
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

    put:
      summary: Updates a specific movie by ID
      operationId: updateMovie
      tags:
        - movies
      parameters:
        - in: path
          name: movieId
          required: true
          schema:
            type: integer
          description: ID of the movie to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        '200':
          description: The movie was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

    delete:
      summary: Deletes a specific movie by ID
      operationId: deleteMovie
      tags:
        - movies
      parameters:
        - in: path
          name: movieId
          required: true
          schema:
            type: integer
          description: ID of the movie to delete
      responses:
        '204':
          description: The movie was deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []

  /cinema-sessions:
    get:
      tags:
        - cinema sessions
      summary: Returns a list of all cinema sessions for all halls
      operationId: getAllCinemaSessions
      parameters:
        - name: offset
          in: query
          description: The number of records to be skipped
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: The number of records to be returned
          required: false
          schema:
            type: integer
        - name: date
          in: query
          description: The date for which the movie sessions should be displayed in format YYYY-MM-DD
          required: false
          schema:
            type: string
            format: date

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CinemaSessionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /cinema-sessions/{hallId}:
    get:
      tags:
        - cinema sessions
      summary: Returns all cinema sessions
      operationId: getCinemaSessionsForHall
      parameters:
        - in: path
          name: hallId
          required: true
          schema:
            type: integer
          description: ID of the hall to retrieve movies
        - name: date
          in: query
          description: The date for which the movie sessions should be displayed in format YYYY-MM-DD
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CinemaSessionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

    post:
      tags:
        - cinema sessions
      summary: Creates a new cinema session
      operationId: createCinemaSession
      parameters:
        - in: path
          name: hallId
          required: true
          schema:
            type: integer
          description: ID of the hall to create cinema session in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                movie_id:
                  type: integer
                  example: 1
                  description: ID of the movie being shown in the cinema session.
                start_time:
                  type: string
                  format: timestamp
                  description: Start time of the cinema session
                  example: 2024-05-18 20:00:00
                price:
                  type: number
                  format: float
                  example: 10.5
                  description: Price for the cinema session in GEL
      responses:
        '201':
          description: The newly created cinema session
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                    example: 1
                    description: Unique identifier of the cinema session. Generated on the server side.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /cinema-sessions/{sessionId}:
    put:
      summary: Updates a specific cinema session
      operationId: updateCinemaSession
      tags:
        - cinema sessions
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: integer
          description: ID of the cinema session to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CinemaSession'
      responses:
        '200':
          description: The cinema session was updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

    delete:
      summary: Deletes a specific cinema session
      operationId: deleteCinemaSession
      tags:
        - cinema sessions
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: integer
          description: ID of the cinema session to delete
      responses:
        '204':
          description: The cinema session was deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /cinema-sessions/{sessionId}/seats:
    get:
      summary: Returns all available seats for the session
      operationId: getAvailableSeats
      tags:
        - cinema sessions
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: integer
          description: ID of the cinema session to get seats available
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  format: int
                example: [1, 2, 3, 4, 8, 9]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tickets:
    post:
      tags:
        - tickets
      summary: Create a new ticket
      description: Create a new ticket and store it in the storage.
      operationId: createTicket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the newly created ticket.
              schema:
                type: string
          content:
            application/pdf:
              schema:
                type: string
                format: binary
                description: The PDF ticket document
                example: Some binary pdf document
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /tickets/{userId}:
    get:
      tags:
        - tickets
      summary: Get all purchased tickets by a specific user
      description: Retrieve information about all tickets bought by user in the database.
      operationId: getTicketByUser
      parameters:
        - name: userId
          in: path
          description: Identifier of the user to retrieve information about bought tickets
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /tickets/{ticketId}:
    get:
      tags:
        - tickets
      summary: Get ticket information
      description: Retrieve information about a ticket based on its identifier.
      operationId: getTicketById
      parameters:
        - name: ticketId
          in: path
          description: Identifier of the ticket to retrieve information about.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Ticket'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

  /users:
    get:
      tags:
        - users
      summary: Get all users
      operationId: getAllUsers
      parameters:
        - name: viewed_movies
          in: query
          description: Return only users who have viewed at least one movie
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - users
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth:
    post:
      tags:
        - authorization
      summary: Logs user into the system
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'

      responses:
        '201':
          description: The user logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    format: sha256
                    description: Unique JWT token for the user
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}:
    get:
      tags:
        - users
      summary: Returns a specific user by ID
      operationId: getUserById
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            description: ID of the user to retrieve
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

    put:
      summary: Updates a specific user by ID
      operationId: updateUser
      tags:
        - users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The user was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

    delete:
      summary: Deletes a specific user by ID
      operationId: deleteUser
      tags:
        - users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: ID of the user to delete
      responses:
        '204':
          description: The user was deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    