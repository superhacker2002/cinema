version: '3'
services:
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
    entrypoint: sh
    command: -c 'mkdir -p /data/tickets && minio server /data'
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:?}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:?}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  set-policy:
    image: minio/mc
    depends_on:
      minio:
        condition: service_started
    entrypoint: sh
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:?}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:?}
    command: >
      -c 'mc alias set minio http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD && mc anonymous set public minio/tickets'

  database:
    image: postgres
    restart: always
    build:
      context: ./database
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 2587
      POSTGRES_DB: cinema
    volumes:
      - ./database/cinemadb.sql:/docker-entrypoint-initdb.d/cinemadb.sql
      - ./database/mock_data.sql:/docker-entrypoint-initdb.d/mock_data.sql

  cinema-service:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./cmd:/app/cmd
      - ./internal:/app/internal
    ports:
      - "8080:8080"
    depends_on:
      - database
      - minio
    environment:
      - PORT=${PORT:?}
      - JWT_SECRET=${JWT_SECRET:?}
      - TOKEN_EXP_IN_HOURS=${TOKEN_EXP_IN_HOURS:?}
      - DATABASE_URL=${DATABASE_URL:?}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:?}
      - BUCKET_NAME=${BUCKET_NAME:?}

